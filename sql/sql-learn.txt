show databases - it list downs the database list
create databse cdb - create database
drop database cdb
system cls


create table tasks(

)

create table checklist(
id int;
task_id int,
title varchar(255) not null,
is_completed boolean not null Default false,
primary key(id,task_id)
)
create table checklist(
id int,
task_id int,
 title varchar(255) not null,
is_completed boolean not null Default false,
primary key(id,task_id),
  references tasks(id)
  
  on update restrict
  on delete cascade
  
  
)


alter table subscribers
rename column id yo s_id

rename tsbl subscribers to sub.





#1

create table IF NOT EXISTS movies (
movies_id int ,
movie_name varchar(50),
movies_type varchar(50),
movies_rating int ,
primary key(movies_id,movies_name)
)

#2

create table company (
company_id primary key,
trade varchar(50) not null,
number_of_employees int not null default 0
)

#3

create table job_offer(
offer_id primary key,
offer_title varchar(50) default "",
offer_min_salary int default 5000 CHECK (offer_min_salary>=5000),
offer_max_salary int default null,
company_id int,
foreign key(company_id)
references company(company_id)
)

#4

ALTER TABLE movies RENAME TO movies_renamed;

#5
ALTER TABLE movies_renamed
ADD COLUMN movie_director VARCHAR(50)

#6

create table new_movies_table (
ID int,
movies_id int ,
movies_name varchar(50),
movies_type varchar(50),
movies_rating VARCHAR(3) ,
movie_director VARCHAR(50),
primary key(movies_id,movies_name)
)

DROP TABLE movies_renamed

ALTER TABLE new_movies_table RENAME TO movies_renamed

#7

ALTER TABLE movies_renamed 
ADD movie_description VARCHAR(50) AFTER movie_name

#8

ALTER TABLE movies_renamed
ALTER COLUMN movies_rating INT

#9
ALTER TABLE movies_renamed
DROP COLUMN movie_director

#10
ALTER TABLE movies_renamed
DROP PRIMARY KEY

#11
ALTER TABLE movies_renamed
ADD CONSTRAINT pk_movies_id primary key(movies_id)

#12

ALTER TABLE company
ADD CONSTRAINT fk_customer_id FOREIGN KEY (company_id)
REFERENCES Company (company_id);




create table tasks(
task_id int auto_increment primary key,
title varchar(255) not null,
start_date DATE,
due_dae DATE,
priority tinyint not null default 3,
description text
)

insert into tasks(title,priority) values ('Learn MYSQL',1)
insert into tasks values(2,'insert statement without column','2024-06-01','2024-06-02',2,'the sequence should be maintained when are using the insert \n without specifying the column names')

insert into tasks(title,start_date,due_date) values ("Insert using current_date in the tasks",
current_date(),current_date()+1) 

insert into tasks (title,priority)
values ('do study',1),
('do requirement gathering',1),
('prepare srs',2),
('signoff requirements',3)


#-----------------------------25/6/2024
 select firstname,lastname from employees;

-display fullname

select firstname+" "+lastname from employees; //oracle will work 
select concat(firstname," ",lastname) from employees;

//with alias
select concat(firstname," ",lastname) as FullName from employees;

select now() => cureent date and time

select current_Date();
select current_Time();

// to check user

select current_user();

//order by

 select officecode,city,phone from offices order by city;


 select city,country,phone,officecode from offices order by country desc,city desc;

//limit 
select orderNumber,priceEach,priceeach from orderdetails limit 10;

// display first 10 orders
 select orderNumber,quantityordered,priceeach,priceeach*quantityordered "totalprice" from orderdetails limit 10;


select orderNumber,quantityordered,priceeach,priceeach*quantityordered "totalprice" from orderdetails order by priceeach*quantityordered limit 10;


//display  order by asc
select orderNumber,quantityordered,priceeach,priceeach*quantityordered "totalprice" from orderdetails order by priceeach*quantityordered asc limit 10;


//display Distinct
 select Distinct status from orders;


select ordernumber,status from orders where status = "In Process";

// order by field

select ordernumber,status from orders order by field(
status,
'In Process',
'On Hold',
'Cancelled',
'Resolved',
'Disputed',
'Shipped'
) limit 20;


// filtering can be achieved in rdbms using where clause
 select * from orders where status = 'In Process';

// filtering and order by

select ordernumber,orderdate,status from orders where status = 'in Process' order by orderdate desc;


//dsiplay all job title who has title sales rep 

 select firstname,lastname,jobtitle from employees where jobtitle = 'Sales Rep';


// display employess with prresdident or vp sales;
select firstname,lastname ,jobtitle from employees where jobtitle in ('President','VP Sales');


select firstname,lastname ,jobtitle from employees where jobtitle in ('President','VP Sales','Sales Rep') and reportsto = 1143;


select firstname,lastname ,jobtitle,reportsto from employees where jobtitle in ('President','VP Sales','Sales Rep') and (reportsto = 1143 or reportsto is null);


select firstname,lastname ,jobtitle,reportsto from employees where jobtitle in ('President','VP Sales','Sales Rep') and reportsto is not null;

sorting
order by,asc desc,fields
Limit,
where :
comparison operators: = ,>,<,>=,<=,!=
logical operators : and,or,not
other operators : in,not in,is null,is not null,like ,not like,between


-display products whose nae starts with america

select productname from products where productname like 'A%';
 select productname from products where productname like 'America%';


select firstname,lastname from employees where firstname like 'J%';

-display start and end with
 select firstname,lastname from employees where firstname like 'M%n';
 
 
 select firstname,lastname from employees where firstname like '__r_r%';
 select firstname,lastname from employees where firstname like '__rr%';
 select firstname,lastname from employees where firstname like '__r%';
 select firstname,lastname from employees where firstname like '__d';
 select firstname,lastname from employees where firstname not like '%y';
 
 //escape sequence
 select productname,productcode from products where productcode like '%\_20%';
 
 select productcode,productname,buyprice from products where buyprice between 90 and 100;
  select productcode,productname,buyprice from products where buyprice not between 90 and 100;
 
 select ordernumber,requireddate,status from orders limit 20;
 
 select ordernumber,requireddate,status from orders where status in ('Shipped','In Proccess') and requireddate between '2003-01-01' and '2003-03-03';
 
 -Find the tp 5 customers based on their credit limit;
 select customerName,creditLimit from customers order by creditLimit desc limit 5;
 select customername,city from customers order by city desc limit 6,0;
  select customername,city from customers order by city desc limit 6,40;
 
 select count(*) from customers;
 select productcode ,max(quantityordered),avg(quantityordered),count(productcode) from orderdetails group by productcode limit 20;
 
 select productcode,priceeach,max(quantityordered) MQuantity,
 min(quantityordered) MinQuantity,
 avg(quantityordered) Total_count
 from orderdetails
 group by productcode,priceeach having count(productcode)>4 limit 20;
 
 
 
 // 26/6/2024
 select productcode,productname,textDescription
 from products p
inner join productlines pl
on p.productline = pl.productline; 
 
 
select employee_id,first_name,last_name,department_name
from departments d
inner join employee e
on d.department_id = e.department_id; 
 
 
 select o1.ordernumber,o1.status,
 sum(quantityordered*priceeach) totalprice
 from orders o1
 inner join orderdetails o2
 on o1.ordernumber=o2.ordernumber
 group by o1.ordernumber
 limit 10;
 
 
 select customerNumber,customerName,ordernumber,orderdate ,productname,quantityordered,priceeach
 from customers
 inner join orders using(customerNumber)
 inner join orderdetails using(ordernumber)
 inner join products using(productcode)
 order by ordernumber,orderlinenumber limit 10;
 
 select customerNumber,customerName,ordernumber,orderdate ,productname,quantityordered,priceeach
 from orders
 inner join orderdetails using(ordernumber)
 inner join products using(productcode)
 inner join customers using(customerNumber)
 order by ordernumber,orderlinenumber limit 10;
 where customerName like 'A%'
 and quantityordered >50;
 
 
 
 
 select customerNumber,customerName,ordernumber,orderdate ,productname,sum(quantityordered*priceeach)
 from orders 
 inner join orderdetails using(ordernumber)
 inner join products using(productcode)
 inner join customers using(customerNumber)
group by customers.customerNumber,customers.customerName,orders.orderNumber,orders.orderdate,products.productname;

 select c.customernumber,customername,ordernumber,status from customers c
 left join orders o
 on c.customernumber = o.customername
 where orderNumber is null
 order by orderNumber desc;
 
 
 select c.customernumber,customername,ordernumber,status from customers c
 left join orders o
 on c.customernumber = o.customernumber
 and ordernumber = 10123;
 
 select employeenumber,customerNumber
 from customers
 right join employees
 on salesrepemployeenumber = employeenumber;
 order by salesrepemployeenumber desc;
 
 
 
 select concat(M.firstName,M.lastName) as "Manager" ,
 concat (E.firstName,E.lastName) as "employee"
 from employees M
 inner join employees E
 on E.reportsto = M.employeenumber
 order by Manager;
 
 
 
  select max(items),min(items),floor(avg(items)) from (select ordernumber,count(ordernumber)as items from orderdetails group by ordernumber)as lineitems;
  select * from employee where employee.salary > (select avg(salary) from employee );
 
 select productname,buyprice,productline from products p1 where buyprice >(select avg(buyprice) from products where productline = p1.productline) order by productline;
 
 
select customername,customernumber from customers where exists ( select ordernumber,sum(priceeach*quantityordered) total from orderdetails inner join orders using (ordernumber) where customernumber = customers.customernumber group by ordernumber having sum(priceeach*quantityordered)>60000);
 

select customerName from  
 (select customernumber,round(sum(quantityordered*priceeach)) sales,
(case 
		when sum(quantityordered*priceeach) <10000 then 'Silver'
		when sum(quantityordered*priceeach) between 10000  and 100000 then 'Gold'
		when sum(quantityordered*priceeach)>100000 then 'Platinum'
		end ) customergroup
 from orderdetails
 inner join orders using(ordernumber) where year(shippeddate) = 2003
 group by customernumber
 limit 20) top20customers2003
 inner join customers using(customerNumber);
 
 
 
 
 select customername from customers where customernumber not in (select distinct customernumber from orders);
 //1
 select e.employee_id,e.manager_id,e.salary from employee e inner join employee m on e.employee_id = m.manager_id;
 
 //2
 select count(*),manager_id from employee group by manager_id order by(count(*)) desc;
 
 //3
 select departments.department_id,count(*) from departments inner join employee on departments.department_id = employee.department_id group by departments.department_id ;
 
 //4
 select * from employee where employee.salary > (select avg(salary) from employee );
 
 
 //5
 select department_id,department_name,max(employee.salary) from employee inner join departments using (department_id) group by (department_id) order by max(employee.salary);
 
 //6
 

 
  SELECT manager_id, GROUP_CONCAT(employee_id ORDER BY employee_id) AS employees
 FROM employee
 GROUP BY manager_id
 ORDER BY manager_id;
 
 SELECT m.manager_id, concat(m.first_name,m.last_name), GROUP_CONCAT(e.employee_id ORDER BY e.employee_id) AS employees
FROM employee e
JOIN employee m ON e.manager_id = m.manager_id
GROUP BY m.manager_id, concat(m.first_name,m.last_name)
ORDER BY m.manager_id;

 
 update employee 
 set commission_pct = 25
 where department_id = (
 select department_id from departments where
 department_name = 'IT'
 );
 
 
 delete from tasks 
 where start_date is null
 and due_date is null
 and priority =2;
 
 
 delete from tasks;
 
 rollback;
 
 truncate table tasks;
 
 
select concat(first_name," ",last_name) fullname from employee;

select upper(first_name),lower(first_name) from employee;

select left(job,2) from employee;
select right(job,3) from employee;

select length(first_name) from employee;

select reverse(first_name) from employee;
 
select reverse(first_name) from employee;

select length(productname),productname,substr(productname,3,4) from products limit 10;
 
 
 select productname,substr(productname,-3,2) from products;
 
 INSERT INTO Student 
VALUES
(1001, 'AKSHRA AGARWAL', 'FEMALE', 70.00, 11, 'A', 'Science', '1996-11-10'),
(1002, 'ANJANI SHARMA', 'FEMALE', 75.00, 11, 'A', 'Commerce', '1996-09-18'),
(1003, 'ANSHUL SAXENA', 'MALE', 78.00, 11, 'A', 'Commerce', '1996-11-19'),
(1004, 'AISHWARYA SINGH', 'FEMALE', 79.00, 11, 'A', 'Commerce', '1996-01-11'),
(1005, 'AKRITI SAXENA', 'FEMALE', 76.00, 11, 'A', 'Commerce', '1996-09-20'),
(1006, 'KHUSHI AGARWAL', 'FEMALE', 77.00, 11, 'A', 'Commerce', '2003-09-14'),
(1007, 'MAAHI AGARWAL', 'FEMALE', 74.00, 11, 'A', 'Science', '1997-04-21'),
(1008, 'MITALI GUPTA', 'FEMALE', 78.00, 12, 'A', 'Science', '1997-11-26'),
(1009, 'NIKUNJ AGARWAL', 'MALE', 58.00, 12, 'A', 'Science', '1997-07-12'),
(1010, 'PARKHI', 'FEMALE', 59.00, 12, 'A', 'Commerce', '1997-12-20'),
(1011, 'PRAKHAR TIWARI', 'MALE', 43.00, 12, 'A', 'Science', '1997-04-22'),
(1012, 'RAGHAV GANGWAR', 'MALE', 58.00, 12, 'A', 'Commerce', '1997-12-21'),
(1013, 'SAHIL SARASWAT', 'MALE', 57.00, 12, 'A', 'Commerce', '1997-08-13'),
(1014, 'SWATI MISHRA', 'FEMALE', 98.00, 11, 'A', 'Science', '1996-08-13'),
(1015, 'HARSH AGARWAL', 'MALE', 58.00, 11, 'B', 'Science', '2003-08-28'),
(1016, 'HARSHIT KUMAR', 'MALE', 98.00, 11, 'B', 'Science', '2003-05-22'),
(1017, 'JAHANVI KAPOOR', 'MALE', 65.00, 11, 'B', 'Science', '1997-01-10'),
(1018, 'STUTI MISHRA', 'MALE', 66.00, 11, 'C', 'Commerce', '1996-01-10'),
(1019, 'SURYANSH KUMAR AGARWAL', 'MALE', 85.00, 11, 'C', 'Commerce', '2007-08-22'),
(1020, 'TANI RASTOGI', 'FEMALE', 75.00, 12, 'C', 'Commerce', '1998-01-15'),
(1021, 'TANISHK GUPTA', 'MALE', 55.00, 12, 'C', 'Science', '1998-04-11'),
(1022, 'TANMAY AGARWAL', 'MALE', 57.00, 11, 'C', 'Commerce', '1998-06-28'),
(1023, 'YASH SAXENA', 'MALE', 79.00, 11, 'C', 'Science', '1998-03-13'),
(1024, 'YESH DUBEY', 'MALE', 85.00, 12, 'C', 'Commerce', '1998-04-03');
 
 
 
 
 //tasks
 
 select ename,sal from employee where sal >= 2200;
  select * from employee where comm is null;
   SELECT *FROM Employee WHERE Sal NOT BETWEEN 2500 AND 4000;
   select * from employee where mgr is null;
   select * from employee where ename like '__A%';
   select * from employee where ename like '%T';
    select * from employee where ename like 'M_L%';
	 select empno,ename,job,mgr,hiredate,sal,case
    when comm is null then 'not given'
    else comm
    end
    ,deptno from employee;
 
  
 